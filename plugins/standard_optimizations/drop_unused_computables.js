"use strict";

/**
 * This optimization locates unused computables and removes them from the scope, thus reducing the final size of the compiled application.
 * An unused computable is a computable with no dependees and no side effects
 */
var topologically_sort_computables = require('../../ir/topologically_sort_computables');

/**
 * @param {{ scopes: Array.<Scope> }} scope_data The scope_data object generated by ir_gen.
 *
 * @returns {{ scopes: Array.<Scope> }} cleaned up version of the input scope_data
 */
function process_ir(scope_data) {
  var drop_count = 0;
  for (var i = 0; i < scope_data.scopes.length; i++) {
    drop_count += clean(scope_data.scopes[i]);
  }

  if (drop_count > 0) {
    console.log('Dropped', drop_count, 'computables.');
  }

  return scope_data;
}

/**
 * @param {Scope} scope
 *
 * @returns {Array.<Computable>} a topologically sorted representation of the computables contained in the input scope
 */
function build_computable_list(scope) {
  var computables = [];
  for (var i = 0; i < scope.get_computable_count(); i++) {
    computables.push(scope.get_computable(i));
  }
  return topologically_sort_computables(computables);
}

/**
 * @param {Scope} scope
 * @returns {number} The number of computables dropped from cleaning this scope
 *
 * Destroys any unused computables contained in the input scope
 */
function clean(scope) {
  var computables = build_computable_list(scope);

  function drop_if_unused(item) {
    if (!is_used(scope, item)) {
      item.destroy();
    }
  }

  var initial_count = scope.get_computable_count();
  for (var i = computables.length - 1; i >= 0; i--) {
    drop_if_unused(computables[i]);
  }

  var dropped = initial_count - scope.get_computable_count();
  return dropped;
}

/**
 * @param {Scope} scope The scope containing the computable we want to check
 * @param {Computable} computable The computable to check
 *
 * @returns {boolean} whether or not the input computable is used in the scope
 */
function is_used(scope, computable) {
  return scope.is_input(computable) || scope.is_output(computable) || computable.get_dependee_count() || computable.is_side_effect_causing();
}

module.exports = process_ir;
